/* 导入的相关部分，这里需确保对应文件路径正确且能被正确加载 */
@import "./modules/reset.css";
@import "./modules/variables.css";
@import './theme/index.css';
@import './iconfont//iconfont.css'; 

/* 以下是针对图标字体相关的样式设置 */
[class*=" blq-icon-"],
[class^=blq-icon-] {
  font-family: iconfont!important;
  speak: none;
  font-style: normal;
  font-weight: 400;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  vertical-align: middle;
  display: inline-block;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale
}

/* 通配符选择器及伪元素选择器相关的盒模型设置 */
*,
:after,
:before {
  box-sizing: content-box;
}

/* clearfix类相关的清除浮动样式 */
.clearfix::after {
  content: "";
  display: table;
  height: 0;
  line-height: 0;
  visibility: hidden;
  clear: both;
}

/* contents类相关的布局样式 */
.contents {
  width: 100%;
  display: flex;
  min-height: calc(100% - 60px);
  justify-content: space-between;
}

/* beautify-scroll-def类相关的滚动条样式 */
.beautify-scroll-def {
  overflow-y: auto;
}
.beautify-scroll-def::-webkit-scrollbar-thumb {
  background-color: rgba(14, 59, 150, 0);
  background-clip: padding-box;
  border-radius: 4px;
}
.beautify-scroll-def:hover::-webkit-scrollbar-thumb {
  background-color: rgba(14, 59, 150, 0.5);
  background-clip: padding-box;
  border-radius: 4px;
}
.beautify-scroll-def::-webkit-scrollbar-track-piece {
  background-color: transparent;
}
.beautify-scroll-def::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
.beautify-scroll-def::-webkit-scrollbar-thumb:hover {
  background-color: rgba(14, 59, 150,.8);
}

/* orderNum类相关的样式（部分被注释掉了，以下是现有生效的样式） */
.orderNum {
  color: #00b8ff;
}

/* yh-big-input类相关的输入框样式及聚焦态样式 */
.yh-big-input {
  width: 253px;
  height: 14px;
  background: transparent;
  border: 1px solid rgba(255, 255, 255,.53);
  border-radius: 4px;
  color: #fff;
  padding: 6px 10px;
  font-size: 14px;
  transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.yh-big-input:focus {
  outline: none;
  border-color: #31abe3;
}

/* yh-big-el-input类及其内部相关输入框样式、 hover态、聚焦态样式 */
.yh-big-el-input {
  width: 253px;
  font-size: 14px;
}
.yh-big-el-input.el-input__inner {
  padding: 6px 10px;
  border: 1px solid rgba(255, 255, 255,.53);
  background-color: transparent;
  font-size: 14px;
  line-height: 1;
  color: #fff;
}
.yh-big-el-input.el-input__inner:hover{
  border-color: rgba(255, 255, 255,.8);
}
.yh-big-el-input.el-input__inner:focus {
  outline: none;
  border-color: #31abe3;
}

/* yh-big-button类相关的按钮样式及hover、聚焦态样式 */
.yh-big-button {
  width: 53px;
  height: 26px;
  background: #00b1d6;
  border-radius: 4px;
  border: none;
  cursor: pointer;
  color: #fff;
  font-size: 15px;
}
.yh-big-button:hover,
.yh-big-button:focus {
  background: #0597b4;
}

/* 浮动相关的两个类样式 */
.float-r {
  float: right;
}
.float-l {
  float: left;
}

/* 字体加粗的类样式 */
.fw-b {
  font-weight: bold;
}

/* 文章一行显示且多余部分省略号显示的类样式 */
.title-item {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* ve-table相关的表格样式重置，包含容器、表头、表体等各部分的样式设置 */
.ve-table {
  box-sizing: border-box;
}
.ve-table.ve-table-container {
  box-sizing: border-box;
}
.ve-table.ve-table-container::-webkit-scrollbar-track-piece {
  background-color: transparent;
}
.ve-table.ve-table-container::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
.ve-table.ve-table-container::-webkit-scrollbar-thumb {
  background-color: rgba(14, 59, 150, 0.5);
  background-clip: padding-box;
  border-radius: 4px;
}
.ve-table.ve-table-container::-webkit-scrollbar-thumb:hover {
  background-color: rgba(14, 59, 150,.8);
}
.ve-table.ve-table-container.ve-table-content {
  position: relative;
}
.ve-table.ve-table-container.ve-table-content::after {
  content: "";
  position: absolute;
  top: 0;
  right: 0px;
  width: 1px;
  height: 100%;
  background-color: #525371;
  z-index: 20;
}
.ve-table.ve-table-border-around {
  border-color: #525371;
}
.ve-table.ve-table-container table.ve-table-content thead.ve-table-header tr.ve-table-header-tr {
  height: 34px;
  box-sizing: border-box;
}
.ve-table.ve-table-container table.ve-table-content thead.ve-table-header tr.ve-table-header-tr th.ve-table-header-th {
  background: #04004E;
  color: #FFF;
  border-color: #525371;
  box-sizing: border-box;
  line-height: 1;
}
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body {
  box-sizing: border-box;
}
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body tr.ve-table-body-tr,
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body tr.ve-table-expand-tr {
  height: 34px;
  box-sizing: border-box;
}
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body tr.ve-table-body-tr td.ve-table-body-td,
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body tr.ve-table-expand-tr td.ve-table-body-td,
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body tr.ve-table-body-tr td.ve-table-expand-td,
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body tr.ve-table-expand-tr td.ve-table-expand-td {
  background: transparent;
  color: #FFF;
  border-color: #525371;
  box-sizing: border-box;
}
.ve-table.ve-table-container table.ve-table-content tbody.ve-table-body.ve-table-row-hover tr.ve-table-body-tr:hover td {
  background-color: rgba(0, 0, 0,.22);
  box-sizing: border-box;
}
.ve-table.ve-table-container.ve-table-border-x th,
.ve-table.ve-table-container.ve-table-border-x td {
  border-color: #525371;
  box-sizing: border-box;
}

/* 颜色相关的类样式，根据假设的颜色变量及对应值来生成具体的类 */
.text-red {
  color: red; /* 这里假设 $colors变量里有 'red': 'red' 这样的对应赋值，实际需替换为真实颜色值 */
}
.bg-red {
  background-color: red;
}
.text-blue {
  color: blue;
}
.bg-blue {
  background-color: blue;
}
/* 以此类推，根据实际的 $colors变量里的键值对生成对应类样式 */

/* 对齐相关的类样式，根据循环里的 left、center、right 生成对应的文本对齐类 */
.text-left {
  text-align: left!important;
}
.text-center {
  text-align: center!important;
}
.text-right {
  text-align: right!important;
}

/* flex相关的类样式，根据假设的 $flex-jc和 $flex-ai变量里的键值对生成对应的justify-content和align-items相关类 */
.jc-start {
  justify-content: flex-start;
}
.jc-center {
  justify-content: center;
}
.jc-end {
  justify-content: flex-end;
}
/* 以此类推，根据实际 $flex-jc变量里的键值对生成对应类样式 */
.ai-start {
  align-items: flex-start;
}
.ai-center {
  align-items: center;
}
.ai-end {
  align-items: flex-end;
}
/* 以此类推，根据实际 $flex-ai变量里的键值对生成对应类样式 */

/* 字体大小相关的类样式，根据假设的 $font-sizes变量里的键值对以及 $base-font-size变量的值生成对应的字体大小类 */
.fs-small {
  font-size: 12px; /* 这里假设 $font-sizes变量里有 'small': 1这样的对应赋值，然后乘以假设的 $base-font-size（假设为12）得到具体字体大小，实际需替换为真实计算值 */
}
.fs-medium {
  font-size: 16px;
}
.fs-large {
  font-size: 20px;
}
/* 以此类推，根据实际 $font-sizes变量里的键值对生成对应类样式 */

/* 间距相关的类样式，根据假设的 $spacing-types、$spacing-sizes、$spacing-directions等变量里的键值对生成各种间距相关类 */
.m-1 {
  margin: 10px; /* 这里假设 $spacing-base-size为10， $spacing-sizes变量里有 '1': 1这样的对应赋值，实际需替换为真实计算值 */
}
.mx-1 {
  margin-left: 10px;
  margin-right: 10px;
}
.my-1 {
  margin-top: 10px;
  margin-bottom: 10px;
}
.mt-1 {
  margin-top: 10px;
}
.ml-1 {
  margin-left: 10px;
}
.mr-1 {
  margin-right: 10px;
}
.mb-1 {
  margin-bottom: 10px;
}
/* 以此类推，根据不同的 $spacing-types（如p表示padding等）以及对应的 $spacing-sizes、$spacing-directions变量里的键值对生成对应类样式 */
.p-1 {
  padding: 10px;
}
.px-1 {
  padding-left: 10px;
  padding-right: 10px;
}
.py-1 {
  padding-top: 10px;
  padding-bottom: 10px;
}
.pt-1 {
  padding-top: 10px;
}
.pl-1 {
  padding-left: 10px;
}
.pr-1 {
  padding-right: 10px;
}
.pb-1 {
  padding-bottom: 10px;
}
/* 等等，涵盖所有根据变量循环生成的间距相关类 */